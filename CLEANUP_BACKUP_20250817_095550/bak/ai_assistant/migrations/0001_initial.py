# Generated by Django 5.2.4 on 2025-08-03 09:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIConversationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('troubleshooting', 'Troubleshooting'), ('maintenance', 'Maintenance'), ('training', 'Training'), ('general', 'General')], max_length=20)),
                ('description', models.TextField()),
                ('system_prompt', models.TextField()),
                ('example_messages', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Conversation Template',
                'verbose_name_plural': 'AI Conversation Templates',
                'db_table': 'ai_conversation_templates',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant'), ('system', 'System')], max_length=10)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ai_model_used', models.CharField(blank=True, max_length=100)),
                ('response_time', models.FloatField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('sources', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Chat Message',
                'verbose_name_plural': 'Chat Messages',
                'db_table': 'chat_messages',
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('session_type', models.CharField(choices=[('general', 'General'), ('troubleshooting', 'Troubleshooting'), ('maintenance', 'Maintenance'), ('training', 'Training')], default='general', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Chat Session',
                'verbose_name_plural': 'Chat Sessions',
                'db_table': 'chat_sessions',
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_index', models.IntegerField()),
                ('content', models.TextField()),
                ('embedding_vector', models.JSONField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Document Chunk',
                'verbose_name_plural': 'Document Chunks',
                'db_table': 'document_chunks',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField(blank=True)),
                ('document_type', models.CharField(choices=[('pdf', 'PDF'), ('doc', 'Word Document'), ('txt', 'Text File'), ('html', 'HTML'), ('markdown', 'Markdown'), ('url', 'URL'), ('manual', 'Manual Entry')], max_length=20)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processing', 'Processing'), ('indexed', 'Indexed'), ('failed', 'Failed'), ('archived', 'Archived')], default='uploaded', max_length=15)),
                ('processing_started', models.DateTimeField(blank=True, null=True)),
                ('processing_completed', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('categories', models.JSONField(blank=True, default=list)),
                ('language', models.CharField(default='en', max_length=10)),
                ('embedding_vector', models.JSONField(blank=True, null=True)),
                ('chunk_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Knowledge Document',
                'verbose_name_plural': 'Knowledge Documents',
                'db_table': 'knowledge_documents',
            },
        ),
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('model_type', models.CharField(choices=[('llm', 'Large Language Model'), ('embedding', 'Embedding Model'), ('classification', 'Classification Model')], max_length=20)),
                ('model_path', models.CharField(max_length=500)),
                ('model_config', models.JSONField(default=dict)),
                ('mode', models.CharField(choices=[('performance', 'Performance Mode'), ('lightweight', 'Lightweight Mode')], default='performance', max_length=15)),
                ('max_tokens', models.IntegerField(default=2048)),
                ('temperature', models.FloatField(default=0.7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('version', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
                'db_table': 'ai_models',
                'indexes': [models.Index(fields=['model_type', 'is_active'], name='ai_models_model_t_6a43a2_idx'), models.Index(fields=['mode', 'is_active'], name='ai_models_mode_c46be6_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tokens_used', models.IntegerField()),
                ('response_time', models.FloatField()),
                ('model_mode', models.CharField(choices=[('performance', 'Performance Mode'), ('lightweight', 'Lightweight Mode')], max_length=15)),
                ('request_type', models.CharField(max_length=50)),
                ('input_length', models.IntegerField()),
                ('output_length', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='ai_assistant.aimodel')),
            ],
            options={
                'verbose_name': 'AI Usage Log',
                'verbose_name_plural': 'AI Usage Logs',
                'db_table': 'ai_usage_logs',
            },
        ),
    ]
