# Generated by Django 5.2.4 on 2025-08-03 09:13

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DatabaseBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_name', models.CharField(max_length=200)),
                ('backup_type', models.CharField(max_length=50)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.BigIntegerField()),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], max_length=15)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Database Backup',
                'verbose_name_plural': 'Database Backups',
                'db_table': 'database_backups',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('custom', 'Custom')], max_length=15)),
                ('interval', models.IntegerField(default=1)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Maintenance Schedule',
                'verbose_name_plural': 'Maintenance Schedules',
                'db_table': 'maintenance_schedules',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('task_type', models.CharField(choices=[('preventive', 'Preventive'), ('corrective', 'Corrective'), ('emergency', 'Emergency'), ('upgrade', 'Upgrade'), ('backup', 'Backup')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('overdue', 'Overdue')], default='pending', max_length=15)),
                ('scheduled_date', models.DateTimeField()),
                ('estimated_duration', models.DurationField()),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='maintenance_attachments/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Maintenance Task',
                'verbose_name_plural': 'Maintenance Tasks',
                'db_table': 'maintenance_tasks',
            },
        ),
        migrations.CreateModel(
            name='PerformanceBaseline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('cpu_baseline', models.FloatField()),
                ('memory_baseline', models.FloatField()),
                ('disk_baseline', models.FloatField()),
                ('network_baseline', models.FloatField()),
                ('cpu_threshold', models.FloatField()),
                ('memory_threshold', models.FloatField()),
                ('disk_threshold', models.FloatField()),
                ('network_threshold', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Performance Baseline',
                'verbose_name_plural': 'Performance Baselines',
                'db_table': 'performance_baselines',
            },
        ),
        migrations.CreateModel(
            name='SQLQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.TextField()),
                ('query_type', models.CharField(choices=[('select', 'SELECT'), ('insert', 'INSERT'), ('update', 'UPDATE'), ('delete', 'DELETE'), ('ddl', 'DDL'), ('other', 'Other')], max_length=10)),
                ('execution_time', models.FloatField()),
                ('rows_affected', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('application', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'SQL Query',
                'verbose_name_plural': 'SQL Queries',
                'db_table': 'sql_queries',
            },
        ),
    ]
